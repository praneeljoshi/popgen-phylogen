import os

def call_seq_gen(tree_list, locus_length, pop_count, alleles_per_pop, model="HKY", max_partitions=5000, seq_gen_prefix="seq-gen", treefile_path="treefile.txt"):
    """
    Calls Seq-Gen, given a list of gene trees generated by ms. pop_count does not include the outgroup.
    """
    # Increment pop_count to take outgroup into account, and then calculate the number of sequence lines per locus
    pop_count += 1
    locus_line_count = pop_count * alleles_per_pop

    # Write the input trees out to the treefile
    with open(treefile_path, "w") as treefile:
        for tree in tree_list:
            treefile.write(tree + "\n")

    # Run Seq-Gen
    stream = os.popen(f'{seq_gen_prefix} -m {model} -l {locus_length} -p {max_partitions} {treefile_path}')

    # Filter output lines in order to ignore the information at the start of each locus
    output_lines = [line for line in stream.readlines() if not line.startswith(" ")]

    # Iterate over the line chunks that comprise each locus
    loci = []
    for i in range(0, len(output_lines), locus_line_count):
        # Parse each sequence line
        locus_ungrouped = [line.strip().split() for line in output_lines[i:i+locus_line_count]]
        # Make individual IDs integers, in order to sort them
        for j, pair in enumerate(locus_ungrouped):
            locus_ungrouped[j] = (int(pair[0]), pair[1])
        # Sort sequences to group populations together
        locus_ungrouped.sort()
        # Remove (unnecessary) individual ID information
        locus_ungrouped = [pair[1] for pair in locus_ungrouped]

        # Group populations together
        locus_grouped = []
        for j in range(0, locus_line_count, alleles_per_pop):
            locus_grouped.append(tuple(locus_ungrouped[j:j+alleles_per_pop]))

        loci.append(tuple(locus_grouped))

    return tuple(loci)

if __name__ == "__main__":
    from call_ms import call_ms
    from admixture_network import generate_admixture_networks
    test_results = generate_admixture_networks(4, 1, 0.02, 0.3, 0.5, 4, 2, 50, 50, 70, True, 1)

    test_network, test_cmd = test_results[0]

    # test_viz = nx.nx_pydot.to_pydot(test_network)
    # test_viz.write_pdf("test_ms.pdf")

    test_haplotypes, test_tree_lines = call_ms(test_cmd, True)

    # print(test_haplotypes)
    # print(test_tree_lines)
    # print(test_cmd)

    test_sequences = call_seq_gen(test_tree_lines, 70, 4, 4, seq_gen_prefix=".\seq-gen.exe")

    print(test_sequences)